{"ast":null,"code":"var isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){return;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://bit.ly/CRA-PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){console.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{console.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"sources":["/Users/missusfantastic/Library/Mobile Documents/com~apple~CloudDocs/Coding/Website Projects/react-eve_vu/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["const isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}