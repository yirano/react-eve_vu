{"version":3,"sources":["components/header/header.js","App.js","serviceWorker.js","index.js"],"names":["header","state","menuActive","handleClick","setState","prevState","className","id","onClick","this","height","width","href","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NA6CeA,G,MA1Cf,2MACCC,MAAQ,CACPC,YAAY,GAFd,EAKCC,YAAc,WACb,EAAKC,UAAS,SAACC,GACd,OAAQA,EAAUH,YAAcG,EAAUH,eAP7C,wEAWE,OACC,4BAAQI,UAAU,SAASC,GAAG,UAC7B,wBAAID,UAAU,eAAd,MACA,4BAAQA,UAAU,WAAWE,QAASC,KAAKN,aAC1C,+BACA,gCAED,yBAAKG,UAAWG,KAAKR,MAAMC,WAAa,OAAS,OAAQM,QAASC,KAAKN,aACtE,yBAAKO,OAAO,KAAKC,MAAM,OACvB,4BACC,4BACC,uBAAGC,KAAK,KAAR,SAED,4BACC,uBAAGA,KAAK,KAAR,cAED,4BACC,uBAAGA,KAAK,KAAR,UAED,4BACC,uBAAGA,KAAK,KAAR,cAKH,yBAAKN,UAAU,cApCnB,GAA4BO,c,MCKbC,MAJf,WACC,OAAO,kBAAC,EAAD,OCLYC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCAjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgG5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GACnCA,EAAaC,iB","file":"static/js/main.f78987ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.scss';\n\nexport class header extends Component {\n\tstate = {\n\t\tmenuActive: false\n\t};\n\n\thandleClick = () => {\n\t\tthis.setState((prevState) => {\n\t\t\treturn (prevState.menuActive = !prevState.menuActive);\n\t\t});\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<header className=\"header\" id=\"header\">\n\t\t\t\t<h1 className=\"headerTitle\">eV</h1>\n\t\t\t\t<button className=\"menuIcon\" onClick={this.handleClick}>\n\t\t\t\t\t<span />\n\t\t\t\t\t<span />\n\t\t\t\t</button>\n\t\t\t\t<nav className={this.state.menuActive ? 'show' : 'hide'} onClick={this.handleClick}>\n\t\t\t\t\t<svg height=\"32\" width=\"32\" />\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"/\">home</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"/\">portfolio</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"/\">about</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"/\">contact</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</nav>\n\n\t\t\t\t<div className=\"hero\" />\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nexport default header;\n","import React from 'react';\nimport Header from '../src/components/header/header';\nimport './App.scss';\n\nfunction App() {\n\treturn <Header />;\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}